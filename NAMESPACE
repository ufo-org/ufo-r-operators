useDynLib(ufooperators, .registration = TRUE, .fixes = "UFO_C_")

# Chunking functions
export(ufo_apply)

# Operators as custom functions
export(ufo_add)
export(ufo_subtract)
export(ufo_multiply)
export(ufo_divide)
export(ufo_power)
export(ufo_modulo)
export(ufo_int_divide)
export(ufo_less)
export(ufo_less_equal)
export(ufo_greater)
export(ufo_greater_equal)
export(ufo_equal)
export(ufo_unequal)
export(ufo_or)
export(ufo_and)
export(ufo_not)
#export(`[.ufo`)
#export(`[<-.ufo`)

# Operators as S3
if (isTRUE(getOption("ufovectors.add_class"))) {
  S3method(`+`,   ufo)
  S3method(`-`,   ufo)
  S3method(`*`,   ufo)
  S3method(`/`,   ufo)
  S3method(`%%`,  ufo)
  S3method(`%/%`, ufo)
  S3method(`^`,   ufo)
  S3method(`<`,   ufo)
  S3method(`>`,   ufo)
  S3method(`<=`,  ufo)
  S3method(`>=`,  ufo)
  S3method(`==`,  ufo)
  S3method(`!=`,  ufo)
  S3method(`|`,   ufo)
  S3method(`&`,   ufo)
  S3method(`!`,   ufo)
  #S3method(`[`,   ufo)
  #S3method(`[<-`, ufo)
}

# Operators overloaded 
# XXX could not get it to work, went with onLoad + eval
#if (isTRUE(getOption("ufovectors.overload_operators"))) {
  #export(`+`)
  #export(`-`)
  #export(`*`)
  #export(`/`)
  #export(`%%`)
  #export(`%/%`)
  #export(`^`)
  #export(`<`)
  #export(`>`)
  #export(`<=`)
  #export(`>=`)
  #export(`==`)
  #export(`!=`)
  #export(`|`)
  #export(`&`)
  #export(`!`)
  #export(`[`)
  #export(`[<-`)
#}

export(ufo_subscript)
export(ufo_subset)

export(ufo_update)
